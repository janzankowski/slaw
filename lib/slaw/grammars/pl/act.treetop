# encoding: UTF-8

###################################
# Note on Polish law terminology. #
###################################
#
# It is very easy to get confused about Polish law logical units
# and their English translations. Because of this, here is how we do it:
# 
# Laws can be either "normative" or "executive". Normative are primary legislation, given by the
# parliament, and they leave some less important details undecided, to be filled in by the
# executive branch (ministers). Ministers issue executive law, which are secondary legislation,
# and fill out these details.
#
# A piece of Polish normative law is called "ustawa", which we translate as "statute".
# A piece of Polish executive law is called "rozporządzenie", which we translate as "ordinance".
#
# Now, moving on to internal divisions of laws, there are differences b/n "ustawa" 
# and "rozporządzenie", but each has a "main" unit, and units above and below it. For clarity,
# let's call the main unit in each as being "at level 0", then its subdivisions as "at level 1",
# then its subdivisions as "at level 2", etc. We can call higher units (containing multiple
# main units), as "at level -1", "at level -2", etc.
#
# Internal divisions of "ustawa":
# - Level 0 is "artykuł", denoted "Art. <number here>.", e.g. "Art. 123."
# - Level 1 is "ustęp", denoted "<number here>.", e.g. "5.".
# - There's a few more sub-levels ("punkt", "litera", "tiret"), identical as for "rozporządzenie".
# - Exception: for important "ustawa" laws called "kodeks" (= code), "ustęp" is 
#   denoted "§<number here>.", e.g. "§123."
#
# Internal divisions of "rozporządzenie":
# - Level 0 is "paragraf", denoted "§<number here>.", e.g. "§123."
# - Level 1 is "ustęp", denoted "<number here>.", e.g. "5."
# - There's a few more sub-levels ("punkt", "litera", "tiret"), identical as for "ustawa".
#
# Here are issues of possible confusion:
# - "Ustawa" and "rozporządzenie" call level 0 unit differently.
# - In "ustawa", there are two alternative ways of denoting level 1 unit.
# - "§" may denote level 0 (in "rozporządzenie") or level 1 (in "ustawa" called "kodeks") units.
# - Many sources translate "ustęp" (level 1) as "paragraph". This is very confusing
#   for "rozporządzenie", because its level 0 is called "paragraf" in Polish.
# - In Polish, the character "§" itself is called "paragraf". (In English, "section sign".)
#
# Because of all this, I think it's extremely important to be careful and very clear with naming.
# To avoid confusion as much as possible, I think it's prudent to avoid English "article",
# "paragraph" and "section", and instead use "levels", together with type of law, statute or
# ordinance. We can go back to direct translation at level 2 and below, because they are the
# same for both types of law, and have non-confusing equivalents in English.
#
# So, we adopt the following translation:
# - artykuł = statute level 0 unit
# - paragraf = ordinance level 0 unit
# - ustęp in "rozporządzenie", or in "ustawa" denoted by numbers = noncode level 1 unit
# - ustęp in "ustawa" denoted by "§" = code level 1 unit
# - punkt = point
# - litera = letter
# - tiret = tiret
# - podwójne tiret = double tiret
# - potrójne tiret = triple tiret
#
# TODO: Spell out the entire hierarchy, not just the bits where statutes and ordinances differ.

require 'slaw/parse/grammar_helpers'
require 'slaw/grammars/pl/act_nodes'

require 'slaw/grammars/terminals'
require 'slaw/grammars/tables'
require 'slaw/grammars/schedules'
require 'slaw/grammars/inlines'

module Slaw
  module Grammars
    module PL
      grammar Act
        include Slaw::Parse::GrammarHelpers

        ########
        # major containers

        rule act
          empty_line*
          preface:preface?
          preamble:preamble?
          body
          schedules:schedules_container? <Act>
        end

        rule preface
          !'PREAMBLE'
          ('PREFACE'i space? eol)?
          statements:(!'PREAMBLE' pre_body_statement)* <Preface>
        end

        rule preamble
          'PREAMBLE'i space? eol
          statements:pre_body_statement* <Preamble>
        end

        rule body
          children:(division / subdivision / chapter / statute_level0_unit / ordinance_level0_unit / block_paragraphs)+ <Body>
        end

        rule division
          heading:division_heading
          children:(subdivision / chapter / statute_level0_unit / ordinance_level0_unit / block_paragraphs)*
          <Division>
        end

        rule subdivision
          heading:subdivision_heading
          children:(chapter / statute_level0_unit / ordinance_level0_unit)*
          <Subdivision>
        end

        rule chapter
          heading:chapter_heading
          children:(statute_level0_unit / ordinance_level0_unit)*
          <Chapter>
        end

        rule statute_level0_unit
          # Either:
          #     Art. 55. This is some text. This is some text. This is
          #     some text. This is some text.
          # Or:
          #     Art. 55.
          #     1. This is some text.
          #     2. This is some text.
          # Or:
          #     Art. 55.
          #     §1. This is some text.
          #     §2. This is some text.
          # Or:
          #     Art. 55. This is some text. This is some text. This is
          #     some text:
          #     1) This is some text.
          #     2) This is some text.
          #     - This is optional "wrap-up" text.
          statute_level0_unit_prefix intro
          children:(noncode_level1_unit / code_level1_unit / point / block_paragraphs)* <StatuteLevel0>
        end

        rule ordinance_level0_unit
          # Either:
          #     §55. This is some text. This is some text. This is
          #     some text. This is some text.
          # Or:
          #     §55.
          #     1. This is some text.
          #     2. This is some text.
          # Or:
          #     §55. This is some text. This is some text. This is
          #     some text:
          #     1) This is some text.
          #     2) This is some text.
          #     - This is optional "wrap-up" text.
          ordinance_level0_unit_prefix intro
          children:(noncode_level1_unit / point / block_paragraphs)* <OrdinanceLevel0>
        end

        rule noncode_level1_unit
          # Either:
          #     123. This is some text. This is some text. This is
          #     some text. This is some text.
          # Or:
          #     123. This is some text. This is some text. This is
          #     some text:
          #     1) This is some text.
          #     2) This is some text.
          #     - This is optional "wrap-up" text.
          # Or (exception found e.g. in "Ustawa z dnia 15 lutego 1992 r. o podatku dochodowym 
          # od osób prawnych", in art. 16, ust. 3f as of 21/8/18):
          #     123. This is some text. This is some text. This is
          #     some text:
          #     a) This is some text.
          #     b) This is some text.
          noncode_level1_unit_prefix intro
          children:(point / letter_unit / block_paragraphs)* <NoncodeLevel1>
        end

        rule code_level1_unit
          # Either:
          #     §123. This is some text. This is some text. This is
          #     some text. This is some text.
          # Or:
          #     §123. This is some text. This is some text. This is
          #     some text:
          #     1) This is some text.
          #     2) This is some text.
          #     - This is optional "wrap-up" text.
          # Or (exception found e.g. in "Ustawa z dnia 15 lutego 1992 r. o podatku dochodowym 
          # od osób prawnych", in art. 16, ust. 3f as of 21/8/18):
          #     123. This is some text. This is some text. This is
          #     some text:
          #     a) This is some text.
          #     b) This is some text.
          code_level1_unit_prefix intro
          children:(point / letter_unit / block_paragraphs)* <CodeLevel1>
        end

        rule point
          # 12) aoeuaoeu
          # 12a) aoeuaoeu
          point_prefix intro
          children:(letter_unit / block_paragraphs)* <Point>
        end

        rule letter_unit
          # a) aoeuaoeu
          letter_prefix intro
          children:(tiret / block_paragraphs)* <LetterUnit>
        end

        # TODO: Full handling of tirets and indented dash sections. So far, they have
        # @@INDENT@@ prepended to them, but we don't process that info yet.

        rule tiret
          # - foo
          # - bar
          children:indent_item+ <Tiret>
        end

        rule indent_item
          indent_prefix item_content:inline_block_element? eol? <IndentItem>
        end

        rule intro
          (intro_inline:inline_block_element / (eol intro_block:block_element))? eol?
        end

        ##########
        # group elements
        # 
        # these are used externally and provide support when parsing just
        # a particular portion of a document

        rule articles
          children:article+ <GroupNode>
        end

        rule chapters
          children:chapter+ <GroupNode>
        end

        rule divisions
          children:division+ <GroupNode>
        end

        rule paragraphs
          children:paragraph+ <GroupNode>
        end

        rule sections
          children:section+ <GroupNode>
        end

        rule subdivisions
          children:subdivision+ <GroupNode>
        end

        ##########
        # headings

        rule division_heading
          space? prefix:division_heading_prefix heading:(newline? content)? eol
          <GenericHeading>
        end

        rule subdivision_heading
          space? prefix:subdivision_heading_prefix heading:(newline? content)? eol
          <GenericHeading>
        end

        rule chapter_heading
          space? prefix:chapter_heading_prefix heading:(newline? content)? eol
          <GenericHeading>
        end

        ##########
        # blocks of content inside containers

        rule block_paragraphs
          block_element+ <BlockParagraph>
        end

        rule block_element
          table / naked_statement
        end

        # Block elements that don't have to appear at the start of a line.
        # ie. we don't need to guard against the start of a chapter, section, etc.
        rule inline_block_element
          table / inline_statement
        end

        ##########
        # statements - single lines of content
        #
        # If a statement starts with a backslash, it's considered to have escaped the subsequent word,
        # and is ignored. This allows escaping of section headings, etc.

        rule naked_statement
          space? !(division_heading / subdivision_heading / chapter_heading / statute_level0_unit_prefix / ordinance_level0_unit_prefix / noncode_level1_unit_prefix / code_level1_unit_prefix / schedule_title / point_prefix / letter_prefix / indent_prefix) '\\'? clauses eol
          <NakedStatement>
        end

        rule pre_body_statement
          space? !(division_heading / subdivision_heading / chapter_heading / statute_level0_unit_prefix / ordinance_level0_unit_prefix / noncode_level1_unit_prefix / code_level1_unit_prefix / schedule_title) '\\'? clauses eol
          <NakedStatement>
        end

        # I can't find a way to put OPTIONAL superscript inside the "_prefix" rules so I make
        # it non-optional there and instead give an empty string alternative here.
        rule superscript
          (('@@SUPERSCRIPT@@' number_letter '##SUPERSCRIPT##') / '')
        end

        ##########
        # prefixes

        rule division_heading_prefix
          'dzia'i ('ł'/'Ł') space alphanums [ :-]*
        end

        rule subdivision_heading_prefix
          'oddzia'i ('ł'/'Ł') space alphanums [ :.-]*
        end

        rule chapter_heading_prefix
          'rozdzia'i ('ł'/'Ł') space alphanums [ :.-]*
        end

        rule statute_level0_unit_prefix
          ('Art.'i / ('Artyku'i 'ł'/'Ł')) space number_letter superscript '.'
        end

        rule ordinance_level0_unit_prefix
          '§' space number_letter superscript '.'
        end

        # TODO: Add superscript possibility for units lower than level 0.

        rule noncode_level1_unit_prefix
          number_letter '.'
        end

        rule code_level1_unit_prefix
          '§' space number_letter '.'
        end

        rule point_prefix
          # 1) foo
          # 2A) foo
          number_letter ')'
        end

        rule letter_prefix
          # a) foo
          # bb) foo
          letters:letter+ ')'
        end

        rule indent_prefix
          # these are two different dash characters
          '–' / '-' space
        end

        include Slaw::Grammars::Inlines
        include Slaw::Grammars::Tables
        include Slaw::Grammars::Schedules
        include Slaw::Grammars::Terminals
      end
    end
  end
end
